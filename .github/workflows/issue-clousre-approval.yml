name: Deployment with Issue Gate

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment for deployment"
        required: true
        default: "prod"

env:
  DEPLOY_ENV: ${{ github.event.inputs.environment }}

permissions:
  issues: write

jobs:
  create-or-reuse-issue:
    runs-on: ubuntu-latest
    outputs:
      issue_number: ${{ steps.find.outputs.issue_number }}
    steps:
      - name: Get changes since last deployment
        id: changes
        run: |
          echo "CHANGES=List of changes since last deployment" >> $GITHUB_ENV
          echo "Changes detected: $CHANGES"

      - name: Find or create deployment issue
        id: find
        uses: actions/github-script@v8
        with:
          script: |
            const envName = process.env.DEPLOY_ENV;
            const titlePrefix = `Deployment Approval Required - ${envName}`;

            // List open issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
            });

            // Look for an open issue for this environment
            let issue_number;
            const existing = issues.data.find(i => i.title.startsWith(titlePrefix));
            if (existing) {
              issue_number = existing.number;
              core.notice(`Found existing open deployment issue for ${envName}: #${issue_number}`);
            } else {
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `${titlePrefix} - ${new Date().toISOString()}`,
                body: `Please complete this checklist before closing:\n- [ ] Code review done\n- [ ] Tests passed\n- [ ] Release notes updated`,
                labels: [`deployment-${envName}`],
              });
              issue_number = issue.data.number;
              core.notice(`Created new deployment issue for ${envName}: #${issue_number}`);
            }

            core.setOutput("issue_number", issue_number);

      - name: Set environment URL
        run: echo "ISSUE_NUMBER=${{ steps.find.outputs.issue_number }}" >> $GITHUB_ENV

  validate-issue:
    runs-on: ubuntu-latest
    needs: create-or-reuse-issue   
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        
      - name: Extract issue number
        run: |
          echo "ISSUE_NUMBER=${{ needs.create-or-reuse-issue.outputs.issue_number }}" >> $GITHUB_ENV   
          
      - name: Wait for issue to be closed
        run: |
          issue_number=$ISSUE_NUMBER
          echo "Issue number:" + $issue_number
          for i in {1..60}; do  # up to 60 minutes (60*60s)
            state=$(gh issue view $issue_number --json state -q .state)
            if [ "$state" = "CLOSED" ]; then
              echo "‚úÖ Issue #$issue_number is closed. Proceeding..."
              exit 0
            fi
            echo "‚è≥ Waiting... Issue #$issue_number still OPEN."
            sleep 60
          done
          echo "‚ùå Timeout: Issue #$issue_number not closed within 60 minutes."
          exit 1
        env:
          GH_TOKEN: ${{ github.token }}

  deploy:
    runs-on: ubuntu-latest
    needs: validate-issue
    environment:
     name: UAT
     url: https://github.com/${{ github.repository }}/issues/${{ needs.create-issue.outputs.issue_number }}
    steps:
      - name: Deploy app
        run: echo "üöÄ Deploying to production..."
